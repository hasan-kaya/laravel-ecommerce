"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Queries"
type Query {
    "Get the authenticated user's profile"
    me: User! @field(resolver: "App\\Presentation\\GraphQL\\Queries\\MeQuery") @guard

    "Get the authenticated user's addresses"
    addresses: [Address!]! @field(resolver: "App\\Presentation\\GraphQL\\Queries\\AddressesQuery") @guard
}

"Account of a person who uses this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}

"Mutations"
type Mutation {
    "Login a user and return an access token"
    login(input: LoginInput!): AuthPayload! @field(resolver: "App\\Presentation\\GraphQL\\Mutations\\LoginMutation")

    "Register a new user and return an access token"
    register(input: RegisterInput!): AuthPayload! @field(resolver: "App\\Presentation\\GraphQL\\Mutations\\RegisterMutation")

    "Update the authenticated user's profile"
    updateProfile(input: UpdateProfileInput!): UpdateProfilePayload! @field(resolver: "App\\Presentation\\GraphQL\\Mutations\\UpdateProfileMutation") @guard

    "Create a new address"
    createAddress(input: CreateAddressInput!): Address! @field(resolver: "App\\Presentation\\GraphQL\\Mutations\\CreateAddressMutation") @guard

    "Update an existing address"
    updateAddress(id: ID!, input: UpdateAddressInput!): Address! @field(resolver: "App\\Presentation\\GraphQL\\Mutations\\UpdateAddressMutation") @guard

    "Delete an address"
    deleteAddress(id: ID!): DeleteAddressPayload! @field(resolver: "App\\Presentation\\GraphQL\\Mutations\\DeleteAddressMutation") @guard

    "Set an address as default"
    setDefaultAddress(id: ID!): Address! @field(resolver: "App\\Presentation\\GraphQL\\Mutations\\SetDefaultAddressMutation") @guard
}

"Input for login mutation"
input LoginInput {
    "Email address"
    email: String! @rules(apply: ["required", "email"])

    "Password"
    password: String! @rules(apply: ["required", "min:8"])
}

"Input for register mutation"
input RegisterInput {
    "Full name"
    name: String! @rules(apply: ["required", "string", "max:255"])

    "Email address"
    email: String! @rules(apply: ["required", "email", "unique:users,email"])

    "Password"
    password: String! @rules(apply: ["required", "min:8"])
}

"Authentication response payload"
type AuthPayload {
    "Access token for authentication"
    access_token: String!

    "Token type (usually Bearer)"
    token_type: String!

    "Token expiration time in seconds"
    expires_in: Int!

    "Authenticated user"
    user: User!
}

"Input for updating profile"
input UpdateProfileInput {
    "Full name"
    name: String! @rules(apply: ["required", "string", "max:255"])

    "Email address"
    email: String! @rules(apply: ["required", "email"])
}

"Update profile response payload"
type UpdateProfilePayload {
    "Updated user"
    user: User!

    "Success message"
    message: String!
}

"Address type"
type Address {
    "Unique primary key"
    id: ID!

    "Address label (Ev, İş, etc.)"
    label: String!

    "Full name"
    full_name: String!

    "Phone number"
    phone: String!

    "İl (City/Province)"
    city: String!

    "İlçe (District)"
    district: String!

    "Mahalle (Neighborhood)"
    neighborhood: String!

    "Full address"
    address: String!

    "Address type (shipping or billing)"
    type: String!

    "Is this the default address"
    is_default: Boolean!

    "When the address was created"
    created_at: DateTime!

    "When the address was last updated"
    updated_at: DateTime!
}

"Input for creating address"
input CreateAddressInput {
    "Address label"
    label: String! @rules(apply: ["required", "string", "max:50"])

    "Full name"
    full_name: String! @rules(apply: ["required", "string", "max:255"])

    "Phone number"
    phone: String! @rules(apply: ["required", "string", "max:20"])

    "İl"
    city: String! @rules(apply: ["required", "string", "max:100"])

    "İlçe"
    district: String! @rules(apply: ["required", "string", "max:100"])

    "Mahalle"
    neighborhood: String! @rules(apply: ["required", "string", "max:100"])

    "Full address"
    address: String! @rules(apply: ["required", "string"])

    "Address type"
    type: String! @rules(apply: ["required", "in:shipping,billing"])

    "Set as default"
    is_default: Boolean
}

"Input for updating address"
input UpdateAddressInput {
    "Address label"
    label: String! @rules(apply: ["required", "string", "max:50"])

    "Full name"
    full_name: String! @rules(apply: ["required", "string", "max:255"])

    "Phone number"
    phone: String! @rules(apply: ["required", "string", "max:20"])

    "İl"
    city: String! @rules(apply: ["required", "string", "max:100"])

    "İlçe"
    district: String! @rules(apply: ["required", "string", "max:100"])

    "Mahalle"
    neighborhood: String! @rules(apply: ["required", "string", "max:100"])

    "Full address"
    address: String! @rules(apply: ["required", "string"])

    "Address type"
    type: String! @rules(apply: ["required", "in:shipping,billing"])

    "Set as default"
    is_default: Boolean
}

"Delete address response"
type DeleteAddressPayload {
    "Success status"
    success: Boolean!

    "Message"
    message: String!
}
